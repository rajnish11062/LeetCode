class Solution {
public:
    int minJumps(vector<int>& arr) {
        int n=arr.size();
        if(n==1)
            return 0;
        
        if(arr[0] == arr[n-1])
            return 1;
        
        unordered_map<int,vector<int>> indexMap;
        for(int i=0;i<arr.size();i++){
            indexMap[arr[i]].push_back(i); 
        }
        int count=0;
        bool done = false;
        vector<int> visited(n+1,0);
        queue<int> Q;
        Q.push(0);
        while(!empty(Q))
        {
            int size = Q.size();
            while(size--){
                int currentIndex = Q.front();
                Q.pop();
                if(currentIndex == n-1)
                {
                    return count;
                }
                //process i-1th index
                if(currentIndex-1 >=0 && !visited[currentIndex-1])
                {
                    Q.push(currentIndex-1);
                    visited[currentIndex-1]=1;
                }
                //process i+1th indx
                if(currentIndex+1 < n && !visited[currentIndex+1])
                {
                    Q.push(currentIndex+1);
                    visited[currentIndex+1]=1;
                }
                
                vector<int> v = indexMap[arr[currentIndex]];
                for(auto &i : v){
                    
                    if(!visited[i])
                    {
                        Q.push(i);
                        visited[i]=1;
                    }
                }
                indexMap[arr[currentIndex]].clear();
            }
            count++;
        }
        
        return count;
    }
};
