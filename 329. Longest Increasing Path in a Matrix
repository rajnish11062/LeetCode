class Solution {
      int dir[4][2] = {{1,0},{0,1},{-1,0},{0,-1}};
    
public:
    bool isvalid(int& r,int& c,vector<vector<int>>&matrix)
    {
        return (r>=0 && c>=0 && r<matrix.size() && c<matrix[0].size());   
    }
    int dfs(int i,int j,vector<vector<int>>& matrix,vector<vector<int>>& cache){
        if(!isvalid(i,j,matrix))
            return 0;
        if(cache[i][j] > 0)
            return cache[i][j];
        else{
            
            int currentLen=1;
            for(auto d : dir){
                int newX = i + d[0];
                int newY = j + d[1];
                

                if(isvalid(newX,newY,matrix)){
                    if(matrix[i][j] >= matrix[newX][newY])
                        continue;
                    
                    currentLen = max(currentLen, 1+dfs(newX,newY,matrix,cache));
                }
            }
            cache[i][j]=currentLen;
            return currentLen;
        }
           
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.size()==0)
            return 0;
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> cache(m,vector<int>(n,0));
        int maxLen=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                maxLen = max(maxLen,dfs(i,j,matrix,cache));
            }
        }
        return maxLen;
    }
};
