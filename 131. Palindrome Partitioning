class Solution {
public:
    bool isPalindrome(string s,int start,int end){
        while(start < end){
            if(s[start++] != s[end--])
                return false;
        }
        return true;
    }
    
    void fillPalindromes(string s, int startIndex, vector<vector<string>> &result,vector<string> &palinDromeStrings){
        int n = s.size();
        if(startIndex == n){
            result.push_back(palinDromeStrings);
        }
        else{
            for(int i=startIndex;i<n;i++){
                if(isPalindrome(s,startIndex,i)){
                    palinDromeStrings.push_back(s.substr(startIndex,i-startIndex+1));
                    fillPalindromes(s,i+1,result,palinDromeStrings);
                    palinDromeStrings.pop_back();
                }
            }
            
        }
    }
    
    vector<vector<string>> partition(string s) {
        vector<vector<string>> result;
        vector<string> palinDromeStrings;
        fillPalindromes(s,0,result,palinDromeStrings);
        
        return result;
    }
};
