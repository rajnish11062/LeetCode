/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        std::queue<Node*> q;
        q.push(root);
        q.push(NULL);
        vector<int> element;
        vector<vector<int>> result;
        if(!root)
            return result;
        while(q.size() >= 1) {
            Node * n = q.front();
            q.pop();
            if(n == NULL){
                result.push_back(element); 
                q.push(NULL);
                 if(q.size()==1)
                    break;
                element.clear();
                
            }
            else
            { 
                for(auto child : n->children){
                    q.push(child);
                }
                element.push_back(n->val);
            }   
        }
        return result;
    }
};
