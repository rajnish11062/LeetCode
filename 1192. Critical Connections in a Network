class Solution {
public:
    // Tarjans algorithm
    void FindBridges(int node , vector<vector<int>> &graph,int parent,vector<int> &insertTime,vector<int> &lowTime,int time,vector<int> &visited,vector<vector<int>> & criticalNodes){
        insertTime[node]=lowTime[node]=time++;
        visited[node]=1;
        for(auto AdjNode : graph[node]){
            
            if(AdjNode==parent)
                continue;
            if(!visited[AdjNode]){
                FindBridges(AdjNode,graph,node,insertTime,lowTime,time,visited,criticalNodes);
                lowTime[node] = min(lowTime[node],lowTime[AdjNode]);
                
                if(lowTime[AdjNode] > insertTime[node])
                    criticalNodes.push_back({node,AdjNode});
            }
            else{
                lowTime[node] = min(lowTime[node],lowTime[AdjNode]);
            }   
        }   
    }
    
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<vector<int>> graph(n+1);
        vector<int> visited(n+1,0);
        vector<vector<int>> criticalNodes;
        for(auto c: connections)
        {
            graph[c[0]].push_back(c[1]);
            graph[c[1]].push_back(c[0]);
        }
        int time=0;
        vector<int> insertTime(n,-1), lowTime(n,-1);
        vector<vector<int>> critical;
        FindBridges(0,graph,-1,insertTime,lowTime,time,visited,criticalNodes);
        return criticalNodes;
    }
};
