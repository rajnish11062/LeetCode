class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
         if(cost.size() == 0)
            return - 1;

        if(cost.size() == 1)
            return gas[0] >= cost[0] ? 0 : -1;
        
        int n = gas.size();
        vector<int> potential_start;
        for(int i=0;i<n;i++){
            if(gas[i] > cost[i])
                potential_start.push_back(i);
        }
        
        int ans = -1;
        for(int i=0;i<potential_start.size();i++){
            
            int start = potential_start[i];
            int end = (start+1)%n;
            int current_gas = gas[start]-cost[start];
            while(end != start){
                
                current_gas += gas[end];
                
                if(current_gas < cost[end])
                    break;
                
                current_gas -= cost[end];
                end = (end+1)%n;
                
            }
            
            if(start == end)
            {
                ans = start;
                break;
            }
            
        }
        return ans;
    }
};


  //O(n) solution , Watched on youtube
  /*
  int total_surplus = 0;
        int surplus = 0;
        int start = 0;
        
        for(int i = 0; i < n; i++){
            total_surplus += gas[i] - cost[i];
            surplus += gas[i] - cost[i];
            if(surplus < 0){
                surplus = 0;
                start = i + 1;
            }
        }
        return (total_surplus < 0) ? -1 : start;
*/
