/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void getSum(TreeNode* root,int count,int &totalSum,int &max){
        
        if(!root)
            return;
        //leaf node do calculations
        if(!root->left && !root->right)
        {
            if(count > max){
                max=count;
                totalSum = root->val;
            }
            else if(count==max){
                totalSum += root->val;
            }
        }
       
        if(root->left)
            getSum(root->left,count+1,totalSum,max);
                    
        if(root->right)
            getSum(root->right,count+1,totalSum,max);
    }
    int deepestLeavesSum(TreeNode* root) {
        
        int count=0,totalSum=0,max=INT_MIN;
        getSum(root,count,totalSum,max);
        return totalSum;
    }
};
