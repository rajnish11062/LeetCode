class Solution {
public:
    bool wordPattern(string pattern, string s) {
        unordered_map<char, string> charMap;
        unordered_map<string, bool> usedStr;
        vector<string> vs;
        istringstream ss(s);
        string str;
        while(ss>>str)
            vs.push_back(str);
        
        if(pattern.size() != vs.size())
            return false;
        int i=0;
        while(i<vs.size()){   
            if(charMap.find(pattern[i]) == charMap.end()){   // if char is not maped
                if(usedStr[vs[i]]==true)                     // but str is used return false
                    return false;
                else
                {
                    usedStr[vs[i]]=true;                       //else use str and make a char-str mapping
                    charMap[pattern[i]]=vs[i];
                }
            }
            else                                              // if char is already maped 
            {
                if ( charMap[pattern[i]] != vs[i])            // but corresponding str is not same with previous one then return false
                    return false;
            }
            i++;
        }
        return true;
    }
};


